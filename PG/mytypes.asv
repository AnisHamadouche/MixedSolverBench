%To add custom types add a case statement with custom dat

function T = mytypes(dt) 
  switch(dt) 
    case 'double' 
      T.n = double([]);
      T.param = double([]);
      T.y = double([]);
      T.x = double([]);
    case 'single' 
      T.n = single([]); 
      T.param = single([]);
      T.y = single([]);
      T.x = single([]);
    case 'fixed8' 
      T.n = fi([],true,8,0); 
      T.param = fi([],true,8,2);
      T.x = fi([],true,8,2); 
      T.y = fi([],true,8,2); 
    case 'fixed16' 
      T.n = fi([],true,16,0); 
      T.param = fi([],true,16,10);
      T.y = fi([],true,16,10);
      T.x = fi([],true,16,14);
    case 'fixed12' 
      T.n = fi([],true,12,0); 
      T.param = fi([],true,12,9);
      T.y = fi([],true,12,9);
      T.x = fi([],true,12,9);
    case 'fixed16override' 
      %use scaled doubles to detect potential overflows (see pg_solv_mex.m)
      T.n = fi([],true,16,0,'DataType', 'ScaledDouble');
      T.param = fi([],true,16,8,'DataType', 'ScaledDouble');      
      T.x = fi([],true,16,14,'DataType', 'ScaledDouble');
      T.y = fi([],true,16,10,'DataType', 'ScaledDouble');
     case 'fixed16+matchproc'
      %Types defined with fimath settings that match processor types 
      F = fimath(... 
      'RoundingMethod','Floor', ... 
      'OverflowAction','Wrap', ... 
      'ProductMode','KeepLSB', ... 
      'ProductWordLength',32, ... 
      'SumMode','KeepLSB', ... 
      'SumWordLength',32); 
      T.n = fi([],true,16,0,F);
      T.param = fi([],true,16,8,F);
      T.x = fi([],true,16,14,F);
      T.y = fi([],true,16,10,F);
  end 
end 